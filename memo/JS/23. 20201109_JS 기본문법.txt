@ 자바스크립트의 기본 문법

## 주석 ##
//	: 한줄 주석
/* ~ */	: 범위 주석

## 변수 선언 ##
변수 종류 : 전역 변수(멤버변수)와 지역 변수
지역 변수
	-> 함수 내부에서 var라는 키워드를 붙여 생성하는 변수
전역 변수
	-> 함수 외부에서 생성되는 변수이거나 혹은 함수 내부에서 var라는 키워드 없이 생성된 변수
	-> 전역변수는 window라는 개체의 멤버 변수
	(window 객체는 브라우저 창에 대한 값을 저장하고 있는 변수)

※ 변수에 대한 자료형은 모두 var 형태

##  변수 이름 명명 규칙 ##
-> 영어 대/소문자, 숫자, _(언더바), $ 사용가능
-> 첫글자 숫자 사용 불가
-> 공백을 포함한 특수문자 사용 불가
-> 이름에 의미있는 단어의 조합을 권장 ( var a / var b ...하지마요..)
-> 예약어를 이름으로 사용 불가
-> 두 단어 이상 결합시 낙타 표기법 권장 (ex) localVariable)
-> 한글 이름 사용 가능 (최대한 지양)
-> 변수, 인스턴스, 함수, 메소드 이름은 항상 소문자로 시작
-> 객체의 생성자 함수의 이름은 항상 대문자로 시작

@ 문자열 (String)
-> " ", ' ' 로 묶여 있는 리터럴 값 (상수)
-> 내장객체로 존재하며(String 객체), 기본적인 메소드가 존재함

toUpperCase()	: 모든 문자를 대문자로 변환
toLowerCase()	: 모든 문자를 소문자로 변환
length		: 글자 개수 조회(멤버 변수)
indexOf()		: 시작부터 가장 먼저 찾는 문자열의 위치를 리턴
lastIndexOf()	: 끝에서 부터 가장 먼저 찾는 문자열의 위치를 리턴
	※ indexOf, lastIndexOf 둘다 인덱스는 0부터 시작

charAt()		: 찾는 위치의 문자 리턴
substring()	: 값의 일부분만 리턴
split()		: 토큰 문자로 분리한 문자열 배열 리턴

@ 숫자(number)
-> 정수형 숫자와 부동소수점 숫자로 구분
-> 내장객체로 Math 객체 제공, 기본 메소드가 존재

Math.abs()		: 절대값 리턴
Math.random()		: 임의의 난수 발생 리턴 (소수점 형태)
	-ex) Math.floor(Math.random()*100)+1
		-> 1~100까지의 수
Math.floor()		: 소수점 자리 무조건 버림
Math.round()		: 소수점에 대해 반올림 처리 후 리턴
Math.ceil()		: 소수점 자리에서 무조건 올림

@ 기타 자료형
-> 논리 (Boolean)		: true, false 두가지 값을 가짐

ex) Boolean (10<5); 

@ typeof()
-> 값의 자료형을 확인하는 연산자
-> 선언시 자료형을 지정하지 않아서 변수명을 보고 데이터형 확인은 불가
	(그렇기 때문에 typeof를 사용)

typeof("문자열")=> string
typeof(숫자)=> number
typeof(true/false)=> Boolean
typeof(객체)=> object
typeof(초기값이 없는 변수)=> undefined
typeof(function)=> function

@ 형 변환
## 숫자 -> 문자열
-> 숫자와 문자열을 + 연산하게 되면 문자열이 우선시 되어 문자열로 변환

ex) "Hello World" + 10; -> "Hello World10";

## 문자열 -> 숫자
-> 강제 형변환 함수를 사용 : Number(), parseInt(), parseFloat()
-> Number 와 parseFloat 함수는 소수점 형태의 문자열을 숫자로 변경 가능
(parseInt는 소수점 문자열이 있는 경우 소수점은 버림)

@ 연산자 종류

최우선 연산자 	: (), [], .
단항 연산자	: ++, --, +(양수), -(음수)
산술 연산자	: +, -, *, /, %
관계 연산자	: >, <, >=, <=, ==, !=, ===, !==
논리 연산자	: &&, ||
대입 연산자	: =
복합대입 연산자	: +=, -=, *=, /=, %=
삼항 연산자	: ?:

※ 연산자 우선순위는 최우선 > 단항 > 산술 > 관계 > 논리 > 삼항 > 대입 순


# === 연산자와 !== 연산자
-> ===는 데이터와 타입까지 같아야 true / 그외 false
-> !==는 데이터 또는 타입이 다르면 true / 그외 false


@ 기본 제어문
## 조건문
-> if, if ~ else, else if, switch, 짧은 조건문( ||, && )

## 짧은 조건문
-> || 는 거짓이면 실행
-> && 는 참이면 실행

|| (or)와 &&(and)의 동작 방식을 이용하여 만든 조건문
-> ||(or) 연산자는 앞의 것이 참이면 뒤의 것을 볼 필요가 없으므로 뒤의 구문이 동작하지 않음
	- 단, 앞의 것이 거짓이면 뒤의 것을 봐야 하므로 그땐 뒤의 구문이 동작
-> &&(and) 연산자는 앞의 것이 참이더라도 뒤의 것을 봐야 하므로 뒤의 구문이 동작
	- 단, 앞의 것이 거짓이면 뒤의 것을 볼 필요가 없으므로 뒤의 구문이 동작하지 않음

## 반복문
-> for, while, do ~ while

## 분기문
-> continue, break;

























