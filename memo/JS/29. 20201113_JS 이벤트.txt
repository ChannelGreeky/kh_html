@ 이벤트의 활용
-> 이벤트 속성과 이벤트핸들러(함수)를 연동하여 이벤트 발생 시 특정 기능을 하도록 하는 것

@ 이벤트 설정 방법
-> 고전 이벤트 모델
-> 인라인 이벤트 모델
-> 표준 이벤트 모델

@ 이벤트 종류
-> 이벤트 종류는 다양하게 있음(w3c)참조
	-click		: 클릭하였을 때 (onclick)
	-focus		: 입력필드에 포커스가 되어있을 때 (onfocus)
	-blur		: 사용자가 입력필드를 떠날 때 (onblur)
	-change		: 상태가 변했을 때	(onchange)

@ 고전 이벤트 모델
-> 요소 객체가 가지고 있는 이벤트 속성에 이벤트핸들러를 연결하는 방법
-> 이벤트를 제거할 때는 속성값에 null값을 넣어주면 됨
-> 이벤트 발생 객체는 핸들러 내부에서 this로 표현 / 스타일 변경 가능
-> 매개변수로 이벤트 정보를 전달할 수도 있음 (e, window.event) - 이벤트 객체

ex) 클릭시 이벤트 설정(고전 이벤트 모델)
var h = document.getElementById('id명')

h.onclick = function() {
	수행기능 설정;
	this.onclick = null; //해당 이벤트를 삭제할 수 있음
}

@ 표준 이벤트 모델
-> w3c에서 공식적으로 지정한 이벤트 모델
-> 한번에 여러가지 이벤트 핸들러 설정가능
-> this키워드가 이벤트 발생 객체를 의미

addEventListner(이벤트 이름, 핸들러)
	-> 이벤트 설정

removeEventListner(이벤트 이름, 핸들러)
	-> 이벤트 삭제

@ 인라인 이벤트 모델
-> 요소 내부에 이벤트를 작성하는 방법
-> 인라인 방식은 <script> 태그에 있는 함수를 호출하는 방식

ex1) 클릭시 이벤트 설정 1번째 방법
<button onclick="처리로직">버튼</button>
-> 클릭 시 동작하는 함수를 요소에 직접 명시하는 방법

ex2) 클릭시 이벤트 설정 2번째 방법
<button onclick="함수호출">버튼</button>
-> 클릭시 동작하는 함수를 script 내에서 찾아서 동작시키는 방법

※ 인라인 이벤트 모델은 우리가 계속 써오던 방법입니다.

@ 이벤트 버블링
-> 자식 노드에서 부모 노드로 이벤트가 전달되는 현상
-> 부모, 자식, 후손 등의 이벤트가 같이 있을 경우 이벤트 버블링 현상으로 인해
자식 노드를 호출하면 부모노드의 이벤트도 같이 발생될 수 있음

# 이벤트 버블링을 막는 방법
-> 이벤트 버블링을 막기 위해서는 아래의 코드를 활용해야 함
	-window.event.stopProgation	// ie 제외 타 브라우저
	-window.cancelBubble = true;	// ie 전용
※ 현재 크롬에서는 둘 다 사용 가능