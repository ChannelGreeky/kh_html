@ 함수
-> 소스코드의 집합으로 메소드, 모듈, 기능, 프로시져 등을 말함
-> 자바스크립트에서는 function도 하나의 자료형
-> 함수는 인자값/매개변수, 리턴값을 가질 수 있음

@ 함수 선언
-> 반환 타입 선언 없이 function 키워드만을 이용하여 사용
-> function 키워드에 함수 명을 작성하여 사용하는 방법 (선언적 함수)
-> function에 함수 명을 작성하지 않고, 변수에 대입하는 방법 (익명 함수)
-> 스스로 동작하는 함수(익명 함수)
	-이벤트 처리시 사용

@ 선언적 함수
function 함수명 ([매개변수]) {
	처리되는 로직
	[return 되돌려줄 값;]
}

ex) 매개변수도 없고, 인자값도 없는 함수

ex) 매개변수는 없지만, 인자값이 있는 함수
-> 매개변수는 없어도 별도의 arguments 배열을 이용하여 처리가 가능 함
<button onclick="test1(10,'이승현이승현')">버튼</button>
    <script>
        function test1() {
            alert(arguments[0]);
            alert(arguments[1]);
        }
    </script>

ex) 매개변수는 있지만, 인자값이 없는 함수

@ 익명 함수 (변수에 함수를 넣어 작성하는 방법)
-> 기존 선언적 함수는 만든 함수를 메모리에 바로 올려 놓기 때문에 코드의
순서에 상관없이 호출이 가능함
-> 하지만 변수에 담기는 익명함수는 함수 선언 이후에만 사용이 가능

var test = function( [매개변수] ) {
	처리되는 로직
	[return 되돌려줄 값;]
}

@ 익명 함수2 (호출 없이 바로 실행되는 구조)
->스스로 동작 하는 함수
(function () {
	처리로직
	//리턴값 없음
}) ();

@ 함수 호출
-> 함수는 반드시 선언(정의)가 되어야만 실행 가능
-> 원하는 기능에 대한 함수를 호출하는 것 (함수 실행)
-> return 값이 있으면 리턴 값을 받을 변수가 있어야 리턴값을 사용할 수 있음

return 값이 없는 경우
-> 함수명();  

return 값이 있는 경우
-> var 변수명 = 함수명();

@ return [되돌려줄 값]
-> return은 함수를 호출한 위치로 돌아가라는 의미
-> return 값(되돌려줄 값)을 지정하지 않으면 undefined 자료형으로 반환 됨

@ 함수 리턴 (클로저 / closure)
클로저란?
-> 외부함수(포함하고 있는)의 변수에 접근할 수 있는 내부함수를 뜻 함
-> 스코프체인이라고도 함
	-스코프란? 변수가 존재하는 영역(지역, 전역 등등)
-> 클로저는 3가지 스코프를 가짐
	- 클로저 자신에 대한 접근 (함수 자기자신에 선언된 지역변수)
	- 외부 함수에서 사용되는 변수에 대한 접근
	- 전역 변수에 대한 접근
-> 클로저를 사용하게 되면 내부에서 사용하였던 지역변수를 계속 사용할 수 있게 됨
	- 함수가 끝나도 해당 변수가 사라지지 않음 
-> 클로저 특징 (정리하면!)
	- 3개의 Scope를 가진다. (전역변수, 외부함수 변수, 내부함수 변수)
	- 클로저 함수에서 접근한 변수는 메모리에서 사라지지 않는다.
	- 클로저는 외부함수에서 내부변수를 접근하는 내부함수를 뜻한다.

@ 내장함수 (인코딩 / 디코딩)
-> 웹상에서 통신시 유니코드 문자는 오작동을 일으킬 문제가 있어 별도의 인코딩이 필요함

유니코드 문자란?
	-> 다양한 문자를 표현하기 위한 숫자 코드값

유니코드를 표현하기 위한 다양한 인코딩 방식
	-> UTF-8, UTF-16, EUC-KR, CP949 등등

※ 유니코드는 문자셋 / UTF-8은 인코딩 방식

@ escape()
	-> 알파벳(대/소문자, 숫자, 특수문자( @ * - + / _ . ))을 제외한 모든 문자열을 인코딩 처리

@ unexcape()
	-> escape로 만들어진 값을 디코딩 처리

@ encodeURI()
	-> 인터넷 주소에 사용되는 문자열 인코딩
	-> 인터넷 주소 전체를 인코딩할 때 사용
	- : ; / = ? &   는 변환 안함

@ decodeURI()
	-> encodeURI() 인코딩한 문자열을 디코딩

@ encodeURIComponent()
	-> 알파벳과 숫자를 제외한 모든 문자 인코딩 (UTF-8 방식)
	-> 주소의 파라미터를 인코딩할 때 사용

@ decodeURIComponent()
	-> encodeURIComponent() 로 인코딩한 문자열을 디코딩

@ eval(String)
-> 문자열로 기술된 코드를 자바스크립트로 실행

@ isFinite (number)
-> number가 맞는지를 확인하는 함수
-> 숫자형이 맞으면 true / 아니면 false
-> 단, 아무것도 없을 경우에도 true로 출력됨

@ isNaN(number)
-> number가 NaN인지 확인
-> 숫자가 아니면 true / 숫자이면 false
-> isFinite의 반대 기능