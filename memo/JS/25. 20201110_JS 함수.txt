@ 함수
-> 소스코드의 집합으로 메소드, 모듈, 기능, 프로시져 등을 말함
-> 자바스크립트에서는 function도 하나의 자료형
-> 함수는 인자값/매개변수, 리턴값을 가질 수 있음

@ 함수 선언
-> 반환 타입 선언 없이 function 키워드만을 이용하여 사용
-> function 키워드에 함수 명을 작성하여 사용하는 방법 (선언적 함수)
-> function에 함수 명을 작성하지 않고, 변수에 대입하는 방법 (익명 함수)
-> 스스로 동작하는 함수(익명 함수)
	-이벤트 처리시 사용

@ 선언적 함수
function 함수명 ([매개변수]) {
	처리되는 로직
	[return 되돌려줄 값;]
}

ex) 매개변수도 없고, 인자값도 없는 함수

ex) 매개변수는 없지만, 인자값이 있는 함수
-> 매개변수는 없어도 별도의 arguments 배열을 이용하여 처리가 가능 함
<button onclick="test1(10,'이승현이승현')">버튼</button>
    <script>
        function test1() {
            alert(arguments[0]);
            alert(arguments[1]);
        }
    </script>

ex) 매개변수는 있지만, 인자값이 없는 함수

@ 익명 함수 (변수에 함수를 넣어 작성하는 방법)
-> 기존 선언적 함수는 만든 함수를 메모리에 바로 올려 놓기 때문에 코드의
순서에 상관없이 호출이 가능함
-> 하지만 변수에 담기는 익명함수는 함수 선언 이후에만 사용이 가능

var test = function( [매개변수] ) {
	처리되는 로직
	[return 되돌려줄 값;]
}

@ 익명 함수2 (호출 없이 바로 실행되는 구조)
->스스로 동작 하는 함수
(function () {
	처리로직
	//리턴값 없음
}) ();

@ 함수 호출
-> 함수는 반드시 선언(정의)가 되어야만 실행 가능
-> 원하는 기능에 대한 함수를 호출하는 것 (함수 실행)
-> return 값이 있으면 리턴 값을 받을 변수가 있어야 리턴값을 사용할 수 있음

return 값이 없는 경우
-> 함수명();  

return 값이 있는 경우
-> var 변수명 = 함수명();

@ return [되돌려줄 값]
-> return은 함수를 호출한 위치로 돌아가라는 의미
-> return 값(되돌려줄 값)을 지정하지 않으면 undefined 자료형으로 반환 됨



