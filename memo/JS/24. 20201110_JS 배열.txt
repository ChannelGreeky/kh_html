@ 배열
-> 다양한 타입의 데이터를 보관하는 변수
	- 자바, C언어들은 같은 데이터 타입이지만 (변수마다 타입이 있어서)
	자바스크립트에서는 배열의 데이터 타입이 별도로 없음
-> [ ] (대괄호)를 통해 생성과 초기화를 동시에 처리 가능
-> 자료형 지정이 없어 모든 자료형(숫자, 문자열, 함수, Boolean, undefined, 객체)이 데이터로 저장 가능
	(자바의 Collection과 비슷)
var 배열명 = [값1(숫자타입), 값2(문자타입), 값3(객체타입), ...];
	-> 다양한 타입이 하나의 배열안에 저장할 수 있음 

@ 배열 선언
-> new 연산자와 Array 객체를 통한 배열 선언
-> 배열 크기를 정하지 않고 선언하는 방법과 배열크기를 정하고 선언하는 방법이 있음

# 배열의 크기를 정하지 않은 배열 선언
var 변수명 = new Array();

# 배열의 크기를 정한 선언
var 변수명 = new Array(초기값);
ex) var arr = new Array(1, 2, 3, 4);

※ new 키워드를 쓰지 않고 [ ] (대괄호)만으로도 초기값을 넣고 선언 가능
var 변수명 = ['a', 2, 3]

@ 배열 공간의 값 대입
-> 값을 입력시에 index 를 이용 할 수 있음
-> 번호 범위 : 0 ~ (배열의 길이-1)
	※ 자바와 같음

ex)
var arr = new Array(1,2,3};
console.log(arr[0]);
console.log(arr[1]);
console.log(arr[2]);
arr[0] = 100;
console.log(arr[0]);

@ Array 객체 함수
-> Array도 하나의 객체이기 때문에 배열에서 활용할 수 있는 여러 함수가 있음

배열명.indexOf("값")	: 배열에서 요소가 위치한 인덱스 리턴
배열명.concat("배열명")	: 두 개 또는 세 개 배열을 결합
배열명.join()		: 배열을 결합하고 문자열로 반환
배열명.reserve()		: 배열의 순서를 거꾸로
배열명.sort()		: 배열을 내림차순 또는 오름차순으로 정렬

배열명.push("값")		: 배열의 맨 뒷 공간을 새롭게 만들어 데이터를 추가
배열명.pop()		: 배열의 맨 뒷공간의 데이터를 추출하고 공간 제거
배열명.shift()		: 배열에서 첫번쨰 데이터를 삭제
배열명.unshift("값")		: 배열의 맨 앞에 새로운 데이터를 추가

배열명slice(숫자, 숫자)	: 배열의 데이터 선택하여 잘라내기(잘라낸 것은 가져옴)
			- 원본 영향 없음

배열명.splice(index, 제거수 [, 추가값]) : 배열의 index 위치의 요소 제거 및 추가
				- 원본 영향 있음

배열명.toString		: 배열의 있는 데이터를 문자열로 반환

# inputOf() 함수
-> 값을 입력하여 해당 값이 위치한 인덱스 위치 값을 리턴

# concat() 함수 
-> 여러 배열들을 결합할때 사용하는 함수

# join() 함수
-> 배열을 결합하여 문자열로 반환 
-> join 함수 안에 있는 것을 구분자로 사용

# reverse() 함수
-> 배열의 공간의 순서를 거꾸로 바꾸는 함수

# sort() 함수
-> 오름차순 혹은 내림차순으로 정렬할 수 있는 함수

# push() / pop()
-> 배열의 데이터를 새롭게 삽입하는 경우에는 push
-> 배열의 데이터를 추출하는 경우에는 pop
-> push와 pop은 배열 공간의 영향을 미침 (push는 배열이 늘어나고, pop은 배열이 줄어듦)

# shift() / unshift()
-> shift는 앞에서부터 밀어 넣음
-> unshift는 맨 앞에것을 추출

# slice (숫자,숫자)
-> 인자를 1개 혹은 2개를 입력하여 사용할 수 있음
-> 인자가 1개면 해당 인덱스부터 끝까지 잘라서 가져오기 (인덱스 ~ 끝)
-> 인자가 2개면 해당 인덱스부터 끝지점 인덱스 전까지 잘라서 가져오기

# 배열명.splice(index,제거수,[추가값]);
-> 배열의 index 위치의 데이터를 제거 및 추가 할수 있는 함수
-> index 값은 배열의 index 위치 값
-> 제거수는 제거될 데이터의 수 (0 값이면 제거되지 않음)
-> 추가 값은 index와 제거수 사이에 추가될 값 
